apiVersion: batch/v1
kind: Job
metadata:
  name: crd-deletion 
  namespace: default
  annotations:
    argocd.argoproj.io/hook: PostSync
    # argocd.argoproj.io/hook-delete-policy: BeforeHookCreation  
spec:
  backoffLimit: 3
  podFailurePolicy:
    rules:
    - action: Ignore
      onPodConditions:
      - type: DisruptionTarget
  template:
    spec:
      serviceAccountName: delete-sa
      containers:
      - name: update-pull-secret
        image: repository.adp.amadeus.net/acs-sre-docker-production-mtpaas-nce-remote/acs_sre_images/ubi9-oc414-minimal:master-20250415_152547-79748ed
        command: ["/bin/sh", "-c"]
        env:
          - name: ARGOCD_APP_NAME
            value: {{.Values.ArgoCDAppName}}
          - name: ARGOCD_APP_REVISION
            value: {{.Values.gitRevision}}
        args:
          - |
            #!/bin/bash
            set -euo pipefail
            echo "$ARGOCD_APP_REVISION new tag set"
            CURRENT_TAG="$ARGOCD_APP_REVISION"
            STALE_CRDS=()
            IN_USE_CRDS=()
            for crd in $(oc get crds -l app.kubernetes.io/managed-by=$ARGOCD_APP_NAME -o jsonpath='{.items[*].metadata.name}'); do
              crd_tag=$(oc get crd "$crd" -o jsonpath='{.metadata.labels.git-revision}')
              echo "Found CRD $crd with tag $crd_tag"
              if [[ "$crd_tag" != "$CURRENT_TAG" ]]; then
                # check if CRs exist
                if ! oc get "$crd" 2>/dev/null | grep -q .; then
                  echo "Marking CRD $crd for deletion"
                  STALE_CRDS+=("$crd")
                else
                  echo "⚠️ CRD $crd still has CRs, skipping"
                  IN_USE_CRDS+=("$crd")
                fi
              fi
            done
            # for crd in $(oc get crds -l app.kubernetes.io/managed-by=$ARGOCD_APP_NAME,stale=true -o jsonpath='{.items[*].metadata.name}'); do
            #   echo "Deleting previously marked stale CRD $crd"
            #   oc delete crd "$crd"
            #   echo "CRD $crd deleted"
            # done
            for crd in "${STALE_CRDS[@]}"; do
              oc label crd "$crd" stale="true" stale-markedAT="$(date -u +%Y-%m-%dT%H.%M.%SZ)" --overwrite
              oc delete crd "$crd"
              echo "CRD $crd deleted"
            done
            if [ ${#IN_USE_CRDS[@]} -ne 0 ]; then
              echo "⚠️ The following CRDs were not deleted because they still have CRs:"
              for crd in "${IN_USE_CRDS[@]}"; do
                echo " - $crd"
                oc label crd "$crd" orphaned="true" orphaned-markedAT="$(date -u +%Y-%m-%dT%H.%M.%SZ)" --overwrite
              done
              exit 1
            fi
      restartPolicy: Never